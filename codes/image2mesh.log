-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ppm2rnm"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ppm2rnm = 0) lood: init ppm2rmn
 load "isoline"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\isoline = 0) load "medit"(load: loadLibary C:\Progrâ(am Files (x86)\FreeFem++\\.\medit = 0)
    2 : string image = "../images/image.pgm";
    3 : // 580 -> 604 (=24) and 2323 -> 2335 (=12)
    4 : real AreaImage = (24 + 2 * 0.2) * (12 + 2 * 0.2);
    5 : real [int , int] Curves(3, 1);
    6 : int [int] be(1) ;
    7 : int nc;
    8 : {
    9 :         // build the curve file xy. txt ...
   10 :         real [int, int] ff1(image) ; // read image and set to an rect . array
   11 :         // remark (0 ,0) is the upper , left corner .
   12 :         int nx = ff1.n , ny = ff1.m ;
   13 :         // build a cartesain mesh such that the origne is qt the right place .
   14 :         mesh Th = square(nx - 1, ny - 1, [(nx - 1)*x, (ny - 1)*(1 - y) ]) ;
   15 :         // warning the numbering is of the vertices (x,y) is
   16 :         // given by $ i = x/nx + nx* y/ny $
   17 :         fespace Vh(Th, P1);
   18 :         Vh f1 ;
   19 :         f1[] = ff1 ; // transforme array in finite element function .
   20 :         real vmax = f1[].max;
   21 :         real vmin = f1[].min;
   22 :         real vm = (vmin + vmax)/2;
   23 :         verbosity = 3;
   24 :         /*
   25 :         Usage of isoline
   26 :         the named parameter :
   27 :         iso =0.25 // value of iso
   28 :         close =1 , // to force to have closing curve ...
   29 :         beginend =be , // begin and end of curve
   30 :         smoothing =.01 , // nb of smoothing process = size ^ ratio * 0.01
   31 :         where size is the size of the curve ...
   32 :         ratio =0.5
   33 :         file =" filename "
   34 :         ouptut :
   35 :         xx , yy the array of point of the iso value
   36 :         a closed curve number n is
   37 :         in fortran notation the point of the curve are:
   38 :         (xx[i],yy[i] , i = i0 , i1)
   39 :         with : i0=be [2*n] , i1=be [2*n +1];
   40 :         */
   41 :         nc = isoline(Th, f1, Curves, iso = vm, close = false, beginend = be, smoothing = .005 , ratio = 0.1);
   42 :         verbosity = 1;
   43 : }
   44 : int ic0 = be(0), ic1 = be(1) - 1;
   45 : //plot([Curves (0, ic0:ic1 ), Curves (1, ic0:ic1)], wait=1);
   46 : // end smoothing the curve ....
   52 # real lg#i = Curves(2, be(2 * i + 1) - 1);  )  + 2 * (abs(y - 7.59) < 0.1) + 3 * (abs(x - 960.4) < 0.1);
   53 : border G#i(t = 0, 1){
   54 :         P = Curve(Curves, be(2 * i), be(2 * i + 1) - 1, t);
   55 :         label = i + 1 + (abs(x - 7.56) < 0.1) + 2 * (abs(y - 7.59) < 0.1) + 3 * (abs(x - 960.4) < 0.1);
   56 : }
   57 : real lg#i = Curves(2, be(2 * i + 1) - 1); //
   58 : GG(0)
   48 :
   49 :
   50 :
   51 :
   52 :
   48 : border G0(t = 0, 1){
   49 :         P = Curve(Curves, be(2 * 0), be(2 * 0 + 1) - 1, t);
   50 :         label = 0 + 1 + (abs(x - 7.56) < 0.1) + 2 * (abs(y - 7.59) < 0.1) + 3 * (abs(x - 960.4) < 0.1);
   51 : }
   52 : real lg0 = Curves(2, be(2 * 0 + 1) - 1);  GG(1)
   48 :
   49 :
   50 :
   51 :
   52 :
   48 : border G1(t = 0, 1){
   49 :         P = Curve(Curves, be(2 * 1), be(2 * 1 + 1) - 1, t);
   50 :         label = 1 + 1 + (abs(x - 7.56) < 0.1) + 2 * (abs(y - 7.59) < 0.1) + 3 * (abs(x - 960.4) < 0.1);
   51 : }
   52 : real lg1 = Curves(2, be(2 * 1 + 1) - 1);  //GG(2) //GG(3)// number of closing curve
   59 : real hh = -20;
   60 : //plot(G0(lg0/hh) + G1(lg1/hh));
   61 : // + (abs(x - 7.56) < 0.05) + 2 * (abs(y - 7.59) < 0.03) + 3 * (abs(x - 960.4) < 0.05);
   62 : func bord = G0(lg0/hh);
   63 : mesh Th = buildmesh(bord);
   64 : //plot(Th, wait = 1);
   65 :
   66 : func bord1 = G1(-lg1/hh);
   67 : mesh Th1 = buildmesh(bord1);
   68 : //plot(Th1, wait = 1);
   69 :
   70 : real scale = sqrt(AreaImage / Th1.area);
   71 : cout << "Scale: " << scale << endl;
   72 : Th = movemesh(Th, [x * scale * 1000 + 580000 - 200, y * scale * 1000 + 2323000 - 200]);
   73 :
   74 : func newlabel = (label == 1) ? 2 : 0;
   75 : Th = change(Th, flabel = newlabel);
   76 :
   77 : //plot(Th, wait = true);
   78 : //medit("test", Th);
   79 : savemesh (Th ,"Th1.mesh");
   80 :
   81 : /*
   82 : func bord = G0(lg0/hh);//+G1(lg1/hh)+G2(lg2/hh)+G3(lg3/hh);
   83 : //plot (bord , wait =1) ;
   84 : mesh Th = buildmesh(bord);
   85 : real scale = sqrt(AreaImage / Th.area);
   86 : cout << "Scale: " << scale << endl;
   87 : Th = movemesh(Th, [x * scale * 1000 + 580000 - 200, y * scale * 1000 + 2323000 - 200]);
   88 : //Th = adaptmesh (Th, 9, IsMetric=1, nbvx=1e6);
   89 : //plot (Th , wait = 1);
   90 : medit("test", Th);
   91 : */
   92 : //
   93 : /*
   94 : fespace Vh(Th,P1);
   95 : Vh u = 0;
   96 : for(int i = 0; i < Th.nv; i++){
   97 :     if(Th(i).label == 1){
   98 :         //ux[][i]=Th(i).x;
   99 :         //uy[][i]=Th(i).y;
  100 :         u[][i] = 1;
  101 :     }
  102 : }
  103 : mesh Sh = trunc(Th, abs(u) < 1.e-10, split = 2, label = 0);
  104 : plot(Sh, wait = 1);
  105 : //Sh = adaptmesh(Sh, 9, IsMetric=1, nbvx=1e6);
  106 : Th = Th + Sh;
  107 :
  108 : //
  109 :
  110 : plot (Th , wait =1) ;
  111 : //medit("test", Th);
  112 : //savemesh (Th ,"Th.mesh") ;
  113 : */ sizestack + 1024 =1992  ( 968 )
 
 Loading image: ../images/image.pgm
 size of image : 969 x 492 type =6
  -- Square mesh : nb vertices  =476748 ,  nb triangles = 950576 ,  nb boundary edges 2918
 -- isoline close=0 iso= 0.498047 1e-010
    bound  isovalue :-0.498047 0.498047
     curve 2 size = 6990 nbsmoothing = 0 5827 12817
     curve 4 size = 5826 nbsmoothing = 0 0 5826
  --  mesh:  Nb of Triangles =    811, Nb of Vertices 503
  --  mesh:  Nb of Triangles =   2615, Nb of Vertices 1381
Scale: 0.0252726
  number of required edges : 0
 write geo in Th1.mesh.gmsh
times: compile 0.508s, execution 0.542s,  mpirank:0
 ######## We forget of deleting   70 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3071,  size :384144 mpirank: 0
Ok: Normal End
 try getConsole D:\Study\Projects\XNM\codes\image2mesh.edp
