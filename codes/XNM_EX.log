 
D:\Study\Projects\XNM\codes>SNM_EX.edp
 
D:\Study\Projects\XNM\codes>-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    2 :
    3 : // load mesh
    4 : string path = "mesh/";
    5 : string filemesh = "Th2";
    6 : mesh Th = readmesh(path + filemesh + ".msh");
    7 :
    8 : int MeshVertices;
    9 : if (filemesh == "Th1")
   10 :     MeshVertices = 503;
   11 : else if (filemesh == "Th2")
   12 :     MeshVertices = 1787;
   13 : else
   14 :     MeshVertices = 6724;
   15 :
   16 : real[int, int] hz(MeshVertices, 4);
   17 : ifstream filemeshZ(path + filemesh + "CoZ.mesh");
   18 : filemeshZ >> hz;
   19 :
   20 : real[string] mapz;
   21 : for (int i = 0; i < hz.n; i++){
   22 :     mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
   23 : }
   24 :
   25 : func real[int] FillZ(real[int] mat){
   26 :     for (int i = 0; i < Th.nv; i++){
   27 :         mat(i) = mapz[string(Th(i).x) + " " + string(Th(i).y)];
   28 :     }
   29 :     return mat;
   30 : }
   31 :
   32 : // load data
   33 : real[int, int] data(503, 3);
   34 : ifstream filedata("data.txt");
   35 : filedata >> data;
   36 : //cout << data << endl;
   37 :
   38 : func real[int] InterpolationData(real t){
   39 :     // t: time (unit: second)
   40 :     real T = 3600;
   41 :     int n = t /  T;
   42 :     real delt = t - n * T;
   43 :     real[int] res(3);
   44 :     res(0) = data(n, 0) * delt + data(n + 1, 0) * (T - delt);
   45 :     res(1) = data(n, 1) * delt + data(n + 1, 1) * (T - delt);
   46 :     res(2) = data(n, 2) * delt + data(n + 1, 2) * (T - delt);
   47 :     return res;
   48 : }
   49 :
   50 : func real FuncOfH(real h){
   51 :     return 1;
   52 :     //return h;
   53 : }
   54 :
   55 : func real FindParameterK(real Q, real[int] &h){
   56 :     real[int] l(h.n);
   57 :     l = Th.hmax;
   58 :     real sumup = 0;
   59 :     for (int i = 0; i < h.n; i++){
   60 :         sumup += FuncOfH(h(i)) * h(i) * l(i);
   61 :     }
   62 :     return Q / sumup;
   63 : }
   64 :
   65 : real dt = 0.1, nu = 2.67 * 1e-4, g = 9.81, rho = 1, T = 9999999; //nu = 2.67 * 1e-4
   66 : real[int] taub = [0 , 0];
   67 :
   68 : fespace Xh(Th, P1);
   69 : Xh u1, u2, v1, v2;
   70 : Xh u1old = 0.5, u2old = 0.5, eta = 9, H, phi;
   71 : Xh z;
 *** Warning  The identifier z hide a Global identifier
 z[] = FillZ(z[]);
   72 : //cout << z[] << endl;
   73 :
   74 :
   75 : macro Grad(u) [dx(u), dy(u)]  )   [dx(u), dy(u)] //
   76 : macro Grad1(u1, u2) [dx(u1), dy(u1), dx(u2), dy(u2)]  )   [dx(u1), dy(u1), dx(u2), dy(u2)] //
   77 : macro Grad2(u1, u2) [[dx(u1), dy(u1)], [dx(u2), dy(u2)]]  )   [[dx(u1), dy(u1)], [dx(u2), dy(u2)]] //
   78 : macro Div(u1, u2) (dx(u1) + dy(u2))  )   (dx(u1) + dy(u2)) //
   79 :
   80 : //declare NS problem
   81 : Xh u1y = 0;
   82 : problem NavierStokes(u1, u2, v1, v2, solver = Crout) =
   83 :     int2d(Th)((u1 * v1 + u2 * v2) / dt)
   84 :     - int2d(Th)(
   85 :         convect([u1old, u2old], -dt, u1old) * v1 / dt +
   86 :         convect([u1old, u2old], -dt, u2old) * v2 / dt
   87 :     )
   88 :     + int2d(Th)(g * Grad(eta)    [dx(eta), dy(eta)] ' * [v1, v2])
   89 :     - int2d(Th)(nu / H * Grad(H)    [dx(H), dy(H)] ' * Grad2(u1, u2)      [[dx(u1), dy(u1)], [dx( u2), dy( u2)]]  * [v1, v2] - nu * Grad1(u1, u2)      [dx(u1), dy(u1), dx(
u2), dy( u2)] ' * Grad1(v1, v2)      [dx(v1), dy(v1), dx( v2), dy( v2)] )
   90 :     + int2d(Th)(1.0 / (rho * H) * (taub(0) * v1 + taub(1) * v2))
   91 :     + on(2, u1 = u1y, u2 = 0) + on(1, u1 = 0, u2 = 0);
   92 :
   93 : Xh HOld;
   94 : HOld = 9 - z;
   95 : real H3 = 0, H4 = 0;
   96 : problem TransportEquation(H, phi) =
   97 :     int2d(Th)(H * phi / dt) - int2d(Th)(HOld * phi / dt) +
   98 :     int2d(Th)(Grad(H)    [dx(H), dy(H)] ' * [u1, u2] * phi + H * Div(u1, u2)     (dx(u1) + dy( u2))  * phi)
   99 :     + on(2, H = HOld) + on(1, H = 0);// + on(3, H = H3) + on(4, H = H4);
  100 :
  101 :
  102 : //initial
  103 : int nbe2 = 0; // number of boundary element
  104 : int nlabel = 2;
  105 : for(int i = 0; i < Th.nbe; i++){
  106 :     if(Th.be(i)[0].label == nlabel){
  107 :         if(Th.be(i)[1].label == nlabel){
  108 :             nbe2 += 1;
  109 :         }
  110 :     }
  111 : }
  112 :
  113 : int[int, int] points2(nbe2, 2);
  114 : real[int] leng2(nbe2);
  115 : int j = 0;
  116 : for(int i = 0; i < Th.nbe; i++){
  117 :     if(Th.be(i)[0].label == nlabel){
  118 :         if(Th.be(i)[1].label == nlabel){
  119 :             leng2(j) = sqrt((Th.be(i)[0].x - Th.be(i)[1].x)^2 + (Th.be(i)[0].y - Th.be(i)[1].y)^2);
  120 :             points2(j, 0) = Th.be(i)[0];
  121 :             points2(j, 1) = Th.be(i)[1];
  122 :             j += 1;
  123 :         }
  124 :     }
  125 : }
  126 : cout << "abc" << endl;
  127 : cout << nbe2 << endl;
  128 : cout << "abc" << endl;
  129 : cout << points2 << endl;
  130 : cout << "abc" << endl;
  131 : cout << leng2 << endl;
  132 : cout << "abc" << endl;
  133 : cout << Th.hmax << endl;
  134 :
  135 : medit("Th", Th);
  136 :  sizestack + 1024 =7092  ( 6068 )
 
  --  mesh:  Nb of Triangles =   3186, Nb of Vertices 1787
abc
7
abc
7 2
          10   3
          11  10
           9  11
           6   9
           7   6
           2   7
           0   2
 
abc
7
        232.0234859     256.0339295     258.4365873     258.4518776     258.459285
        258.3217966     249.6927619
abc
407.911
version de medit ffmedit.exe -popen -filebin 1  Th
  -- Medit,  Release 3.0a (Nov. 30, 2007)
     Copyright (c) LJLL, 1999-2007.
     compiled:  jeu. 21 juin 2018 13:37:18 (with ff++ 3.61).
 
medit with binary version of popen : mesh(es)
mesh_name= Th
 Loading data file(s)
End of mesh
  Input seconds:     0.00
 
 medit1()
 
 Building scene(s)
  Creating scene 1
   Loading default options
  Scene seconds:     0.20
 
 Rendering scene(s)
 
 Total running seconds:  561.94
 Thank you for using Medit.
times: compile 0.313s, execution 562.279s,  mpirank:0
 ######## We forget of deleting   32278 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0 CodeAlloc : nb ptr  3636,  size :412576 mpirank: 0
Ok: Normal End
 try getConsole D:\Study\Projects\XNM\codes\SNM_EX.edp
