-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    2 :
    3 : // load mesh
    4 : string path = "mesh/";
    5 : string filemesh = "Th2";
    6 : mesh Th = readmesh(path + filemesh + ".msh");
    7 : //medit("Th", Th);
    8 :
    9 : int NoVMesh; // Number of Vertices Mesh
   10 : int[int] neighbor2; // manually
   11 : if (filemesh == "Th1"){
   12 :     NoVMesh = 503;
   13 :     neighbor2 = [498, 494, 495, 497, 501];
   14 : }else if (filemesh == "Th2"){
   15 :     NoVMesh = 1787;
   16 :     neighbor2 = [2, 9, 18, 7, 21, 22, 14, 5];
   17 : }else{
   18 :     NoVMesh = 6724;
   19 :     neighbor2 = [6717, 6718, 6714, 6703, 6698, 6681, 6677, 6676, 6675, 6674, 6673, 6687, 6686, 6704, 6715, 6721]È™ßt±Ë?;
   20 : }
   21 : //cout << neighbor2 << endl;
   22 :
   23 :
   24 : real[int, int] hz(NoVMesh, 4);
   25 : ifstream filemeshZ(path + filemesh + "CoZ.mesh");
   26 : filemeshZ >> hz;
   27 :
   28 : real[string] mapz;
   29 : for (int i = 0; i < hz.n; i++){
   30 :     mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
   31 : }
   32 :
   33 : func real[int] FillZ(real[int] mat){
   34 :     for (int i = 0; i < Th.nv; i++){
   35 :         mat(i) = mapz[string(Th(i).x) + " " + string(Th(i).y)];
   36 :     }
   37 :     return mat;
   38 : }
   39 :
   40 : real[int, int] data(503, 3);
   41 : ifstream filedata("mesh/data.txt");
   42 : filedata >> data;
   43 : //cout << data << endl;
   44 :
   45 : func real[int] InterpolationData(real t){
   46 :     // t: time (unit: second)
   47 :     real T = 3600;
   48 :     int n = t /  T;
   49 :     real delt = t / T - n;
   50 :     real[int] res(3);
   51 :     res(0) = data(n, 0) * delt + data(n + 1, 0) * (1 - delt);
   52 :     res(1) = data(n, 1) * delt + data(n + 1, 1) * (1 - delt);
   53 :     res(2) = data(n, 2) * delt + data(n + 1, 2) * (1 - delt);
   54 :     return res;
   55 : }
   56 :
   57 : func real FuncOfH(real h){
   58 :     //return 1;
   59 :     return h;
   60 : }
   61 :
   62 : func real FindParameterK(real Q, real[int] &h, real[int] &l){
   63 :     real sumArea = 0;
   64 :     for (int i = 0; i < h.n; i++){
   65 :         //cout << h(i) * l(i) << " " ;
   66 :         sumArea += FuncOfH(h(i)) * h(i) * l(i);
   67 :     }
   68 :     //cout << endl << sumArea <<" " << Q  << " " << Q/sumArea << endl;
   69 :     return Q / sumArea;
   70 : }
   71 :
   72 :
   73 : real dt = 0.01, nu = 2.67 * 1e-4, g = 9.81, rho = 100, n = 0.025, T = 9999999; //nu = 2.67 * 1e-4
   74 : real tau =  g * n * n;
   75 :
   76 : fespace Xh(Th, P1);
   77 : Xh u1, u2, v1, v2;
   78 : Xh u1old = 0.5, u2old = 0.5, eta, H, phi;
   79 : Xh z;
 *** Warning  The identifier z hide a Global identifier
 z[] = FillZ(z[]);
   80 : //cout << z[] << endl;
   81 :
   82 :
   83 : macro Grad(u) [dx(u), dy(u)]  )   [dx(u), dy(u)] //
   84 : macro Grad1(u1, u2) [dx(u1), dy(u1), dx(u2), dy(u2)]  )   [dx(u1), dy(u1), dx(u2), dy(u2)] //
   85 : macro Grad2(u1, u2) [[dx(u1), dy(u1)], [dx(u2), dy(u2)]]  )   [[dx(u1), dy(u1)], [dx(u2), dy(u2)]] //
   86 : macro Div(u1, u2) (dx(u1) + dy(u2))  )   (dx(u1) + dy(u2)) //
   87 :
   88 : //declare NS problem
   89 : Xh u1y = 1;
   90 : problem NavierStokes([u1, u2], [v1, v2], solver = Crout) =
   91 :     int2d(Th)((u1 * v1 + u2 * v2) / dt)
   92 :     - int2d(Th)(
   93 :         convect([u1old, u2old], -dt, u1old) * v1 / dt
   94 :         + convect([u1old, u2old], -dt, u2old) * v2 / dt
   95 :     )
   96 :     + int2d(Th)(g * Grad(eta)    [dx(eta), dy(eta)] ' * [v1, v2])
   97 :     - int2d(Th)(nu / H * Grad(H)    [dx(H), dy(H)] ' * Grad2(u1, u2)      [[dx(u1), dy(u1)], [dx( u2), dy( u2)]]È™ßt±Ë?  * [v1, v2] - nu * Grad1(u1, u2)      [dx(u1), dy(u1), dx( u2), dy( u2)] ' * Grad1(v1, v2)      [dx(v1), dy(v1), dx( v2È™ßt±Ë?), dy( v2)] )
   98 :     + int2d(Th)((tau * H^(-4.0/3) * (u1old * u1old + u2old * u2old)^(0.5)) * (u1* v1 + u2 * v2))
   99 :     + on(2, u1 = u1y, u2 = 0) + on(1, u1 = 0, u2 = 0);
  100 :
  101 : Xh HOld = 9 - z;
  102 : real Hbond2 = 9;
  103 : real H3 = 0, H4 = 0;
  104 : problem TransportEquation(H, phi) =
  105 :     int2d(Th)(H * phi / dt)
  106 :     //- int2d(Th)(convect([u1,u2], -dt, HOld) * phi / dt) + int2d(Th)(H * Div(u1, u2) * phi)
  107 :     - int2d(Th)(HOld * phi / dt) + int2d(Th)(Grad(H)    [dx(H), dy(H)] ' * [u1, u2] * phi + H * Div(u1, u2)
(dx(u1) + dy( u2))  * phi)
  108 :     + on(2, H = Hbond2) + on(1, H = 0) + on(3, H = H3) + on(4, H = H4);
  109 :
  110 :
  111 : //initial
  112 : int nbe2 = 0; // number of boundary element
  113 : int nlabel = 2;
  114 : for(int i = 0; i < Th.nbe; i++){
  115 :     if(Th.be(i)[0].label == nlabel){
  116 :         if(Th.be(i)[1].label == nlabel){
  117 :             nbe2 += 1;
  118 :         }
  119 :     }
  120 : }
  121 :
  122 : int[int, int] points2(nbe2, 2);
  123 : real[int] leng2(nbe2);
  124 : int j = 0;
  125 : for(int i = 0; i < Th.nbe; i++){
  126 :     if(Th.be(i)[0].label == nlabel){
  127 :         if(Th.be(i)[1].label == nlabel){
  128 :             leng2(j) = sqrt((Th.be(i)[0].x - Th.be(i)[1].x)^2 + (Th.be(i)[0].y - Th.be(i)[1].y)^2);
  129 :             points2(j, 0) = Th.be(i)[0];
  130 :             points2(j, 1) = Th.be(i)[1];
  131 :             j += 1;
  132 :         }
  133 :     }
  134 : }
  135 : //cout << nbe2 << endl;
  136 : //cout << points2 << endl;
  137 : //cout << leng2 << endl;
  138 : //cout << Th.hmax << endl;
  139 : int ii = 0;
  140 : real[int] h(nbe2);
  141 : real eps = 1e-6;
  142 : ofstream writefile("velocity.txt");
  143 : for(real t = dt; t < T; t += dt){
  144 :     cout << "t: " << t << endl;
  145 :     real[int] QHH = InterpolationData(t);
  146 :     H3 = QHH(1);
  147 :     H4 = QHH(2);
  148 :     Xh uOnBoundary2 = 0;
  149 :     cout << "HOld: "<< HOld[].min << " +-+ " << HOld[].max << endl;
  150 :     for(int it = 0; it < Th.nv; it++){
  151 :         if(HOld[][it] < eps){
  152 :             HOld[][it] = eps;
  153 :         }
  154 :     }
  155 :     TransportEquation;
  156 :     cout << "HOld: "<< HOld[].min << " +-+ " << HOld[].max << endl;
  157 :     for(int it = 0; it < Th.nv; it++){
  158 :         if(H[][it] < eps){
  159 :             H[][it] = eps;
  160 :         }
  161 :     }
  162 :     //h_i = (H_i + H_i+1)/2....here
  163 :     for(int i = 0; i < nbe2; i++){
  164 :         h(i) = (H[](points2(i, 0)) + H[](points2(i, 1))) / 2;
  165 :     }
  166 :
  167 :     real k = FindParameterK(QHH(0), h, leng2);
  168 :     //cout << "h: " << h << " k: "<< k << " Q: " << QHH(0) << endl;
  169 :     for(int i = 0; i < h.n; i++){
  170 :         uOnBoundary2[](points2(i, 0)) =  k * FuncOfH(h(i));
  171 :         uOnBoundary2[](points2(i, 1)) =  k * FuncOfH(h(i));
  172 :     }
  173 :
  174 :     eta = H + z;
  175 :     u1y = uOnBoundary2;
  176 :     NavierStokes;
  177 :     u1old = u1; u2old = u2;
  178 :     HOld = H;
  179 :     Hbond2 = 0;
  180 :     for(int it = 0; it < neighbor2.n; it++){
  181 :         Hbond2 += HOld[][neighbor2(it) - 1];
  182 :     }
  183 :     Hbond2 = Hbond2 / neighbor2.n;
  184 :     //plot([u1, u2], fill = 1, value = 1);
  185 :     plot(H, fill = 1, value = 1);
  186 :     // streamline
  187 :     savesol("result/Th." + string(ii) + ".sol", Th, H); //[u1, u2]
  188 :         savemesh(Th, "result/Th." + string(ii)+".mesh");
  189 :     ii += 1;
  190 :     if (ii > 10000){
  191 :         break;
  192 :     }
  193 :
  194 :         // Xh psi,phi;
  195 :     // solve streamlines(psi,phi) =
  196 :     //     int2d(Th)( dx(psi)*dx(phi) + dy(psi)*dy(phi))
  197 :     //     + int2d(Th)(-phi * (dy(u1)-dx(u2))) + on(1, psi = 0)+on(2, 3, 4, psi=0);
  198 :     // plot(psi, fill=true, value = 1);
  199 :
  200 : }
  201 : savemesh(Th, "result/Th.mesh");
  202 :  sizestack + 1024 =9028  ( 8004 )
 
  --  mesh:  Nb of Triangles =   3186, Nb of Vertices 1787
t: 0.01
HOld: -8.19413 +-+ 21.6884
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -4.97121  max 19.4762
HOld: 1e-006 +-+ 21.6884
 kk 2 3 :  Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.00508356  max 0.794746
          min -0.00509605  max 0.790071
  number of required edges : 0
 write geo in result/Th.0.mesh.gmsh
t: 0.02
HOld: 1e-006 +-+ 19.4762
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -2.43563e-005  max 19.5427
HOld: 1e-006 +-+ 19.4762
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.0178779  max 0.79356
          min -0.0177839  max 0.787923
  number of required edges : 0
 write geo in result/Th.1.mesh.gmsh
t: 0.03
HOld: 1e-006 +-+ 19.5427
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -4.34492e-005  max 19.6094
HOld: 1e-006 +-+ 19.5427
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.0265027  max 0.793233
          min -0.0263143  max 0.795049
  number of required edges : 0
 write geo in result/Th.2.mesh.gmsh
t: 0.04
HOld: 1e-006 +-+ 19.6094
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -5.20158e-005  max 19.6223
HOld: 1e-006 +-+ 19.6094
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.0304125  max 0.798651
          min -0.0301272  max 0.802135
  number of required edges : 0
 write geo in result/Th.3.mesh.gmsh
t: 0.05
HOld: 1e-006 +-+ 19.6223
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -5.45451e-005  max 19.6249
HOld: 1e-006 +-+ 19.6223
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.0317993  max 0.80437
          min -0.031423  max 0.809211
  number of required edges : 0
 write geo in result/Th.4.mesh.gmsh
t: 0.06
HOld: 1e-006 +-+ 19.6249
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -5.4831e-005  max 19.6255
HOld: 1e-006 +-+ 19.6249
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.0334111  max 0.81259
          min -0.0369384  max 0.816282
  number of required edges : 0
 write geo in result/Th.5.mesh.gmsh
t: 0.07
HOld: 1e-006 +-+ 19.6255
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -5.47255e-005  max 19.6258
HOld: 1e-006 +-+ 19.6255
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -0.0349839  max 0.820809
          min -0.0443328  max 0.82335
  number of required edges : 0
 write geo in result/Th.6.mesh.gmsh
t: 0.08
HOld: 1e-006 +-+ 19.6258
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
 Warning: -- Your set of boundary condition is incompatible with the mesh label.
  -- Solve :
          min -5.4572e-005  max 19.6259
HOld: 1e-006 +-+ 19.6258
 try getConsole D:\Study\Projects\XNM\codes\XNM.edp
