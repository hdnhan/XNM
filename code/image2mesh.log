-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "ppm2rnm"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\ppm2rnm = 0) lood: init ppm2rmn
 load "isoline"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\isoline = 0) load "medit"(load: loadLibary C:\Progrâ(am Files (x86)\FreeFem++\\.\medit = 0)
    2 : string image = "../realdata/image.pgm";
    3 : // 580 -> 604 (=24) and 2323 -> 2335 (=12)
    4 : real AreaImage = (24 + 2 * 0.2) * (12 + 2 * 0.2); // Km2
    5 : real [int, int] Curves(3, 1);
    6 : int [int] be(1) ;
    7 : int nc;
    8 : {
    9 :         real [int, int] ff1(image) ; // read image and set to an rect. array
   10 :         int nx = ff1.n, ny = ff1.m;
   11 :         mesh Th = square(nx - 1, ny - 1, [(nx - 1) * x, (ny - 1) * (1 - y)]);
   12 :         fespace Vh(Th, P1);
   13 :         Vh f1;
   14 :         f1[] = ff1 ; // transforme array in finite element function.
   15 :         nc = isoline(Th, f1, Curves, iso = 0.25, close = 1, beginend = be, smoothing = .005, ratio = 0.1);
   16 :         verbosity = 1;
   17 : }
   18 : int ic0 = be(0), ic1 = be(1) - 1;
   24 # real lg#i = Curves(2, be(2 * i + 1) - 1);  )  + 2 * (abs(y - 7.59) < 0.5) + 3 * (abs(x - 960.4) < 0.5);
   25 : border G#i(t = 0, 1){
   26 :         P = Curve(Curves, be(2 * i), be(2 * i + 1) - 1, t);
   27 :         label = i + 1 + (abs(x - 7.56) < 0.5) + 2 * (abs(y - 7.59) < 0.5) + 3 * (abs(x - 960.4) < 0.5);
   28 : }
   29 : real lg#i = Curves(2, be(2 * i + 1) - 1); //
   30 : GG(0)
   20 :
   21 :
   22 :
   23 :
   24 :
   20 : border G0(t = 0, 1){
   21 :         P = Curve(Curves, be(2 * 0), be(2 * 0 + 1) - 1, t);
   22 :         label = 0 + 1 + (abs(x - 7.56) < 0.5) + 2 * (abs(y - 7.59) < 0.5) + 3 * (abs(x - 960.4) < 0.5);
   23 : }
   24 : real lg0 = Curves(2, be(2 * 0 + 1) - 1);  GG(1)
   20 :
   21 :
   22 :
   23 :
   24 :
   20 : border G1(t = 0, 1){
   21 :         P = Curve(Curves, be(2 * 1), be(2 * 1 + 1) - 1, t);
   22 :         label = 1 + 1 + (abs(x - 7.56) < 0.5) + 2 * (abs(y - 7.59) < 0.5) + 3 * (abs(x - 960.4) < 0.5);
   23 : }
   24 : real lg1 = Curves(2, be(2 * 1 + 1) - 1);  // number of closing curve
   31 : real hh = -2;
   32 : //plot(G0(lg0/hh) + G1(lg1/hh));
   33 :
   34 : func bord = G0(lg0/hh);
   35 : mesh Th = buildmesh(bord);
   36 : //plot(Th, wait = 1);
   37 :
   38 : func bord1 = G1(-lg1/hh);
   39 : mesh Th1 = buildmesh(bord1);
   40 : //plot(Th1, wait = 1);
   41 :
   42 : real scale = sqrt(AreaImage / Th1.area);
   43 : cout << "Scale: " << scale << endl;
   44 : Th = movemesh(Th, [x * scale * 1000 + 580000 - 200, y * scale * 1000 + 2323000 - 200]);
   45 :
   46 : // func newlabel = (label == 2) ? 1 : 0;
   47 : // Th = change(Th, flabel = newlabel);
   48 :
   49 : //plot(Th, wait = true);
   50 : medit("Th", Th);
   51 : savemesh (Th ,"data/Th4.msh"); sizestack + 1024 =1968  ( 944 )
 
 Loading image: ../realdata/image.pgm
 size of image : 969 x 492 type =6
  -- Square mesh : nb vertices  =476748 ,  nb triangles = 950576 ,  nb boundary edges 2918
 -- isoline close=1 iso= 0.25 1e-010
    bound  isovalue :-0.25 0.746094
  --  mesh:  Nb of Triangles =  75825, Nb of Vertices 38885
  --  mesh:  Nb of Triangles = 275561, Nb of Vertices 138510
Scale: 0.0252501
version de medit ffmedit.exe -popen -filebin 1  Th
  -- Medit,  Release 3.0a (Nov. 30, 2007)
     Copyright (c) LJLL, 1999-2007.
     compiled:  jeu. 21 juin 2018 13:37:18 (with ff++ 3.61).
 
medit with binary version of popen : mesh(es)
mesh_name= Th
 Loading data file(s)
End of mesh
  Input seconds:     0.06
 
 medit1()
 
 Building scene(s)
  Creating scene 1
   Loading default options
  Scene seconds:     0.21
 
 Rendering scene(s)
 
 Total running seconds:  7.63
 Thank you for using Medit.
  number of required edges : 0
times: compile 0.226s, execution 11.679s,  mpirank:0
 ######## We forget of deleting   128 Nb pointer,   0Bytes  ,  mpirank 0, memory leak =0
 CodeAlloc : nb ptr  3049,  size :383592 mpirank: 0
Ok: Normal End
 try getConsole D:\Study\Projects\XNM\code\image2mesh.edp
