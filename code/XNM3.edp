load "medit"

string path = "data/";
int nthfile = 3;
string filemesh = "Th" + nthfile;
mesh Thold = readmesh(path + filemesh + ".msh");
//medit("Thold", Thold);

int[int] NoVMesh = [515, 1802, 6718];
real[int, int] hz(NoVMesh[nthfile - 1], 3);
ifstream filemeshZ(path + filemesh + "CoZ.txt");
filemeshZ >> hz;

real[string] mapz;
for (int i = 0; i < hz.n; i++){
    mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
}

func real[int] FillZ(real[int] mat){
    for (int i = 0; i < Thold.nv; i++){
        mat(i) = mapz[string(Thold(i).x) + " " + string(Thold(i).y)];
    }
    return mat;
}

real[int, int] data(503, 4);
ifstream filedata(path + "SLMIKE21-3.txt");
filedata >> data;

func real[int] InterpolationData(real t){
    // t: time (unit: second)
    real T = 3600;
    int n = t /  T;
    real delt = t / T - n;
    real[int] res(4);
    res(0) = data(n, 0) * delt + data(n + 1, 0) * (1 - delt);
    res(1) = data(n, 1) * delt + data(n + 1, 1) * (1 - delt);
    res(2) = data(n, 2) * delt + data(n + 1, 2) * (1 - delt);
    res(3) = data(n, 3) * delt + data(n + 1, 3) * (1 - delt);
    return res; 
}

real dt = 1e-2, nu = 2.67 * 1e-4, g = 9.81, rho = 1000, n = 0.025, T = 9999999;
real tau =  g * n * n;
real eps = 0.05;

macro Grad(u) [dx(u), dy(u)] //
macro Grad1(ux, uy) [dx(ux), dy(ux), dx(uy), dy(uy)] //
macro Grad2(ux, uy) [[dx(ux), dy(ux)], [dx(uy), dy(uy)]] //
macro Div(ux, uy) (dx(ux) + dy(uy)) //


fespace Xhold(Thold, P1);
Xhold zh; zh[] = FillZ(zh[]);
Xhold H, phi, Hold = 9 - zh;
Xhold uxold = 0.5, uyold = 0;
Xhold ux, uy;

int cnt = 0;
string foldername = "result3/";

for(real t = dt; t <= T; t += dt){
    cout << "t: " << t << endl;
    real[int] BoundData = InterpolationData(t);
    Xhold etaUB = BoundData(1);
    Xhold etaUB1 = BoundData(2);
    Xhold etaUB2 = BoundData(3);

    solve TransportEquation(H, phi) = 
        int2d(Thold)(H * phi / dt) - int2d(Thold)(Hold * phi / dt) 
        //+ int2d(Th)(Grad(H)' * [ux, uy] * phi + H * Div(ux, uy) * phi)
        - int2d(Thold)(H * [ux, uy]' * Grad(phi))
        + on(2, H = etaUB - zh) + on(1, H = 0);// + on(3, H = etaUB1 - zh) + on(4, H = etaUB2 - zh);

    mesh Thwet = trunc(Thold, H >= eps );
    mesh Thdry = Thwet;
    // mesh Thdry = trunc(Thold, H <= eps, split = 3, label = 6);
    // medit("test", Thwet);

    ofstream wf(foldername + "Thdry.msh");
    wf.fixed;
    wf << Thdry.nv << " " << Thdry.nt << " " << Thdry.nbe << endl;
    for(int i = 0; i < Thdry.nv; i++){
        int check = 0;
        for (int j = 0; j < Thdry.nbe; j++){
            if ((i == Thdry.be(j)[0] || i == Thdry.be(j)[1]) && (Thdry(i).label == 0 || Thdry(i).label == 0)){
                check = 1;
                break;
            }
        }
        if (check == 1){
            wf << Thdry(i).x << " " << Thdry(i).y << " " << 1 << endl;
        }else{
            wf << Thdry(i).x << " " << Thdry(i).y << " " << Thdry(i).label << endl;
        }
    }
    for (int i = 0; i < Thdry.nt; i++){
        wf << Thdry[i][0] + 1 << " " << Thdry[i][1]  + 1 << " " << Thdry[i][2]  + 1 << " " << Thdry[i].label << endl;
    }
    for(int i = 0; i < Thdry.nbe; i++){
        wf << Thdry.be(i)[0] + 1 << " " << Thdry.be(i)[1] + 1 << " " << Thdry.be(i).label <<  endl;
    }
    wf.flush;

    Thdry = readmesh(foldername + "Thdry.msh");
    // medit("test", Thdry);
    mesh Thnew = Thdry;
    // Thnew = trunc(Thnew, H > 0.001*eps);
    // medit("Thnew", Thnew);

    fespace Xhnew(Thnew, P1);
    Xhnew ux, uy, vx, vy;
    
    Xhnew eta = H + zh;
    Xhnew uUB = BoundData(0);
    solve NavierStokes([ux, uy], [vx, vy], solver = Crout) = 
        int2d(Thnew)((ux * vx + uy * vy) / dt)
        - int2d(Thnew)(
              convect([uxold, uyold], -dt, uxold) * vx / dt 
            + convect([uxold, uyold], -dt, uyold) * vy / dt
        )
        //+ int2d(Th)(g * Grad(eta)' * [vx, vy])
        - int2d(Thnew)(g * eta * Div(vx, vy))
        - int2d(Thnew)(nu / H * [vx, vy]' * Grad2(ux, uy) * Grad(H) - nu * Grad1(ux, uy)' * Grad1(vx, vy))
        + int2d(Thnew)((tau * 1/H^(4/3) * (uxold * uxold + uyold * uyold)^(0.5)) * (ux * vx + uy * vy))
        + on(2, ux = uUB, uy = 0) + on(1, ux = 0, uy = 0);

    uxold = ux; uyold = uy;
    Hold = H;
    plot(H, fill = 1, value = 1);
    plot([ux, uy], fill = 1, value = 1);

    savesol(foldername + "ThH." + string(cnt) + ".sol", Thold, H);
	savemesh(Thold, foldername + "ThH." + string(cnt)+".mesh");
    savesol(foldername + "ThU." + string(cnt) + ".sol", Thnew, [ux, uy]);
	savemesh(Thnew, foldername + "ThU." + string(cnt)+".mesh");
    cnt += 1;
}
savemesh(Thold, foldername + "ThU.mesh");
savemesh(Thold, foldername + "ThH.mesh");
