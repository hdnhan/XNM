load "medit"

string path = "data/";
int nthfile = 3;
string filemesh = "Th" + nthfile;
mesh Th = readmesh(path + filemesh + ".msh");

int[int] NoVMesh = [515, 1802, 6718];
real[int, int] hz(NoVMesh[nthfile - 1], 3);
ifstream filemeshZ(path + filemesh + "CoZ.txt");
filemeshZ >> hz;

real[string] mapz;
for (int i = 0; i < hz.n; i++){
    mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
}

func real[int] FillZ(real[int] mat){
    for (int i = 0; i < Th.nv; i++){
        mat(i) = mapz[string(Th(i).x) + " " + string(Th(i).y)];
    }
    return mat;
}

real[int, int] data(503, 4);
ifstream filedata(path + "SLMIKE21-3.txt");
filedata >> data;

func real[int] InterpolationData(real t){
    // t: time (unit: second)
    real T = 3600;
    int n = t /  T;
    real delt = t / T - n;
    real[int] res(4);
    res(0) = data(n + 1, 0) * delt + data(n, 0) * (1 - delt);
    res(1) = data(n + 1, 1) * delt + data(n, 1) * (1 - delt);
    res(2) = data(n + 1, 2) * delt + data(n, 2) * (1 - delt);
    res(3) = data(n + 1, 3) * delt + data(n, 3) * (1 - delt);
    return res; 
}

real dt = 1e-2, nu = 2.67 * 1e-4, g = 9.81, rho = 1000, n = 0.025, T = 9999999;
real tau =  g * n * n;
real eps = 0.05;

macro Grad(u) [dx(u), dy(u)] //
macro Grad1(ux, uy) [dx(ux), dy(ux), dx(uy), dy(uy)] //
macro Grad2(ux, uy) [[dx(ux), dy(ux)], [dx(uy), dy(uy)]] //
macro Div(ux, uy) (dx(ux) + dy(uy)) //


fespace Xh(Th, P1);
fespace Hh(Th, P1dc);
Xh zh; zh[] = FillZ(zh[]);
Hh H, phi, Hold = 9 - zh;
Xh ux = 0.5, uy = 0.0;
Xh vdof;
vdof[] = 0 : Xh.ndof-1;

int cnt = 0;
string foldername = "result3/";

savemesh(Th, foldername + "ThH.mesh");
savemesh(Th, foldername + "ThU.mesh");

for(real t = dt; t <= T; t += dt){
    cout << "t: " << t << endl;
    real[int] BoundData = InterpolationData(t);
    real etaUB = BoundData(1);
    // real etaUB1 = BoundData(2);
    // real etaUB2 = BoundData(3);

    real al = 0.5;
    macro n() (N.x * ux + N.y * uy) //
    solve TransportEquation(H, phi) = 
        int2d(Th)((H/dt + ux * dx(H) + uy * dy(H) + H * Div(ux, uy)) * phi)
        + intalledges(Th)((1 - nTonEdge) * phi * (al * abs(n) - n/2) *  jump(H))
        - int1d(Th, 2)((n < 0) * abs(n) * H * phi)
        - int2d(Th)(Hold * phi / dt)
        + int1d(Th, 2)((n < 0) * abs(n) * (etaUB - zh) * phi);
    
    mesh Thwet = trunc(Th, H >= eps);

    ofstream wf(foldername + "Thwet.msh");
    wf.fixed;
    wf << Thwet.nv << " " << Thwet.nt << " " << Thwet.nbe << endl;
    
    for(int i = 0; i < Thwet.nv; i++){
        int check = 0;
        for (int j = 0; j < Thwet.nbe; j++){
            if ((i == Thwet.be(j)[0] || i == Thwet.be(j)[1]) && (Thwet(i).label == 0)){
                check = 1;
                break;
            }
        }
        if (check == 1){
            wf << Thwet(i).x << " " << Thwet(i).y << " " << 1 << endl;
        } else {
            wf << Thwet(i).x << " " << Thwet(i).y << " " << Thwet(i).label << endl;
        }
    }

    for (int i = 0; i < Thwet.nt; i++){
        wf << Thwet[i][0] + 1 << " " << Thwet[i][1]  + 1 << " " << Thwet[i][2]  + 1 << " " << Thwet[i].label << endl;
    }

    for(int i = 0; i < Thwet.nbe; i++){
        wf << Thwet.be(i)[0] + 1 << " " << Thwet.be(i)[1] + 1 << " " << Thwet.be(i).label <<  endl;
    }

    wf.flush;

    Thwet = readmesh(foldername + "Thwet.msh");
    // medit("Thwet", Thwet);

    fespace Xhwet(Thwet, P1);
    Xhwet uwx, uwy, vx, vy;
    Xhwet uxold, uyold;
    Xhwet etawet, Hwet;

    for(int i = 0; i < Thwet.nv; i++){
        uxold[][i] = ux(Thwet(i).x, Thwet(i).y);
        uyold[][i] = uy(Thwet(i).x, Thwet(i).y);
        Hwet[][i] = H(Thwet(i).x, Thwet(i).y); 
        etawet[][i] = Hwet[][i] + zh(Thwet(i).x, Thwet(i).y);
    }
    ux = 0; uy = 0; // reset
    
    real uUB = BoundData(0);
    solve NavierStokes([uwx, uwy], [vx, vy], solver = Crout) = 
        int2d(Thwet)((uwx * vx + uwy * vy) / dt)
        - int2d(Thwet)(
              convect([uxold, uyold], -dt, uxold) * vx / dt 
            + convect([uxold, uyold], -dt, uyold) * vy / dt
        )
        + int2d(Thwet)(g * Grad(etawet)' * [vx, vy])
        // - int2d(Thwet)(g * eta * Div(vx, vy))
        - int2d(Thwet)(nu / Hwet * [vx, vy]' * Grad2(uwx, uwy) * Grad(Hwet) - nu * Grad1(uwx, uwy)' * Grad1(vx, vy))
        + int2d(Thwet)((tau * 1/Hwet^(4/3) * (uxold * uxold + uyold * uyold)^(0.5)) * (uwx * vx + uwy * vy))
        + on(2, uwx = uUB, uwy = 0) + on(1, uwx = 0, uwy = 0);


    for(int i = 0; i < Thwet.nv; i++){
        ux[][vdof(Thwet(i).x, Thwet(i).y)] = uwx[][i];
        uy[][vdof(Thwet(i).x, Thwet(i).y)] = uwy[][i];
    }
    Hold = H;
    // plot(H, fill = 1, value = 1);
    plot([ux, uy], fill = 1, value = 1);
    // medit("Th", Th, [ux, uy]);

    savesol(foldername + "ThH." + string(cnt) + ".sol", Th, H);
	savemesh(Th, foldername + "ThH." + string(cnt)+".mesh");
    savesol(foldername + "ThU." + string(cnt) + ".sol", Th, [ux, uy]);
	savemesh(Th, foldername + "ThU." + string(cnt)+".mesh");
    cnt += 1;
}
