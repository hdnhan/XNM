load "medit"

// load mesh
string path = "data/";
string filemesh = "Th2";
mesh Th = readmesh(path + filemesh + ".msh");
//medit("Th", Th);

int NoVMesh; // Number of Vertices Mesh
int[int] neighbor2; // manually
if (filemesh == "Th1"){
    NoVMesh = 503;
    // neighbor2 = [498, 494, 495, 497, 501];
}else if (filemesh == "Th2"){
    NoVMesh = 1787;
    // neighbor2 = [2, 9, 18, 7, 21, 22, 14, 5];
}else{
    NoVMesh = 6724;
    // neighbor2 = [6717, 6718, 6714, 6703, 6698, 6681, 6677, 6676, 6675, 6674, 6673, 6687, 6686, 6704, 6715, 6721];
}
//cout << neighbor2 << endl;


real[int, int] hz(NoVMesh, 4);
ifstream filemeshZ(path + filemesh + "CoZ.mesh");
filemeshZ >> hz;

real[string] mapz;
for (int i = 0; i < hz.n; i++){
    mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
}

func real[int] FillZ(real[int] mat){
    for (int i = 0; i < Th.nv; i++){
        mat(i) = mapz[string(Th(i).x) + " " + string(Th(i).y)];
    }
    return mat;
}

real[int, int] data(503, 4);
ifstream filedata(path + "SLMIKE21-4.txt");
filedata >> data;
//cout << data << endl;

func real[int] InterpolationData(real t){
    // t: time (unit: second)
    real T = 3600;
    int n = t /  T;
    real delt = t / T - n;
    real[int] res(4);
    res(0) = data(n, 0) * delt + data(n + 1, 0) * (1 - delt);
    res(1) = data(n, 1) * delt + data(n + 1, 1) * (1 - delt);
    res(2) = data(n, 2) * delt + data(n + 1, 2) * (1 - delt);
    res(3) = data(n, 3) * delt + data(n + 1, 3) * (1 - delt);
    return res; 
}

real dt = 0.01, nu = 2.67 * 1e-4, g = 9.81, rho = 100, n = 0.025, T = 9999999; //nu = 2.67 * 1e-4
real tau =  g * n * n;
 
fespace Xh(Th, P1);
Xh u1, u2, v1, v2;
Xh u1old = 0.5, u2old = 0.5, eta, H, phi;
Xh z; z[] = FillZ(z[]);
//cout << z[] << endl;
 

macro Grad(u) [dx(u), dy(u)] //
macro Grad1(u1, u2) [dx(u1), dy(u1), dx(u2), dy(u2)] //
macro Grad2(u1, u2) [[dx(u1), dy(u1)], [dx(u2), dy(u2)]] //
macro Div(u1, u2) (dx(u1) + dy(u2)) //

//declare NS problem
real uUB = 1;
problem NavierStokes([u1, u2], [v1, v2], solver = Crout) = 
    int2d(Th)((u1 * v1 + u2 * v2) / dt)
    - int2d(Th)(
        convect([u1old, u2old], -dt, u1old) * v1 / dt 
        + convect([u1old, u2old], -dt, u2old) * v2 / dt
    )
    + int2d(Th)(g * Grad(eta)' * [v1, v2])
    - int2d(Th)(nu / H * Grad(H)' * Grad2(u1, u2) * [v1, v2] - nu * Grad1(u1, u2)' * Grad1(v1, v2))
    + int2d(Th)((tau * H^(-4.0/3) * (u1old * u1old + u2old * u2old)^(0.5)) * (u1* v1 + u2 * v2))
    + on(2, u1 = uUB, u2 = 0) + on(1, u1 = 0, u2 = 0);

Xh HOld = 9 - z;
real etaUB = 1, etaUB1 = 1, etaUB2 = 1;
problem TransportEquation(H, phi) = 
    int2d(Th)(H * phi / dt) 
    //- int2d(Th)(convect([u1,u2], -dt, HOld) * phi / dt) + int2d(Th)(H * Div(u1, u2) * phi)
    - int2d(Th)(HOld * phi / dt) + int2d(Th)(Grad(H)' * [u1, u2] * phi + H * Div(u1, u2) * phi)
    + on(2, H = etaUB) + on(1, H = 0) + on(3, H = etaUB1) + on(4, H = etaUB2);


//initial
int nbe2 = 0; // number of boundary element
int nlabel = 2;
for(int i = 0; i < Th.nbe; i++){
    if(Th.be(i)[0].label == nlabel){
        if(Th.be(i)[1].label == nlabel){
            nbe2 += 1;
        }
    }
}

int[int, int] points2(nbe2, 2);
real[int] leng2(nbe2);
int j = 0;
for(int i = 0; i < Th.nbe; i++){
    if(Th.be(i)[0].label == nlabel){
        if(Th.be(i)[1].label == nlabel){
            leng2(j) = sqrt((Th.be(i)[0].x - Th.be(i)[1].x)^2 + (Th.be(i)[0].y - Th.be(i)[1].y)^2);
            points2(j, 0) = Th.be(i)[0];
            points2(j, 1) = Th.be(i)[1];
            j += 1;
        }
    }
}
//cout << nbe2 << endl;
//cout << points2 << endl;
//cout << leng2 << endl;
//cout << Th.hmax << endl;
int ii = 0;
real[int] h(nbe2);
real eps = 1e-6;
ofstream writefile("velocity.txt");
string foldername = "result3/";
for(real t = dt; t < T; t += dt){
    cout << "t: " << t << endl;
    real[int] QHH = InterpolationData(t);
    uUB = QHH(0);
    etaUB = QHH(1); // TH3
    etaUB1 = QHH(2);
    etaUB2 = QHH(3);
    Xh uOnBoundary2 = 0;
    // cout << "HOld: "<< HOld[].min << " +-+ " << HOld[].max << endl; 
    for(int it = 0; it < Th.nv; it++){
        if(HOld[][it] < eps){
            HOld[][it] = eps;
        }
    }
    TransportEquation;
    // cout << "HOld: "<< HOld[].min << " +-+ " << HOld[].max << endl;
    for(int it = 0; it < Th.nv; it++){
        if(H[][it] < eps){
            H[][it] = eps;
        }
    }

    eta = H + z; 
    NavierStokes;
    u1old = u1; u2old = u2;
    HOld = H;
    /* 
    // TH1:
    real Hbond2 = 0;
    for(int it = 0; it < neighbor2.n; it++){
        Hbond2 += HOld[][neighbor2(it) - 1];
    }
    Hbond2 = Hbond2 / neighbor2.n;
    etaUB = Hbond2;
    */
    plot(H, fill = 1, value = 1);
    // streamline
    savesol(foldername + "Th." + string(ii) + ".sol", Th, H); //[u1, u2]
	savemesh(Th, foldername + "Th." + string(ii)+".mesh");
    ii += 1;
    if (ii > 10000){
        break;
    }

	// Xh psi,phi;
    // solve streamlines(psi,phi) = 
    //     int2d(Th)( dx(psi)*dx(phi) + dy(psi)*dy(phi)) 
    //     + int2d(Th)(-phi * (dy(u1)-dx(u2))) + on(1, psi = 0)+on(2, 3, 4, psi=0);
    // plot(psi, fill=true, value = 1);
    
}
savemesh(Th, foldername + "Th.mesh");
