load "medit"

string path = "data/";
int nthfile = 2;
string filemesh = "Th" + nthfile;
mesh Th = readmesh(path + filemesh + ".msh");

int[int] NoVMesh = [515, 1802, 6718, 6718];
real[int, int] hz(NoVMesh[nthfile - 1], 3);
ifstream filemeshZ(path + filemesh + "CoZ.txt");
filemeshZ >> hz;

real[string] mapz;
for (int i = 0; i < hz.n; i++){
    mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
}

func real[int] FillZ(real[int] mat){
    for (int i = 0; i < Th.nv; i++){
        mat(i) = mapz[string(Th(i).x) + " " + string(Th(i).y)];
    }
    return mat;
}

real[int, int] data(503, 4);
ifstream filedata(path + "SLMIKE21-3.txt");
filedata >> data;

func real[int] InterpolationData(real t){
    // t: time (unit: second)
    real T = 3600;
    int n = t /  T;
    real delt = t / T - n;
    real[int] res(4);
    res(0) = data(n + 1, 0) * delt + data(n, 0) * (1 - delt);
    res(1) = data(n + 1, 1) * delt + data(n, 1) * (1 - delt);
    res(2) = data(n + 1, 2) * delt + data(n, 2) * (1 - delt);
    res(3) = data(n + 1, 3) * delt + data(n, 3) * (1 - delt);
    return res; 
}

real dt = 1, nu = 2.67 * 1e-4, g = 9.81, rho = 1000, n = 0.025, T = 9999999;
real tau =  g * n * n;

macro Grad(u) [dx(u), dy(u)] //
macro Grad1(ux, uy) [dx(ux), dy(ux), dx(uy), dy(uy)] //
macro Grad2(ux, uy) [[dx(ux), dy(ux)], [dx(uy), dy(uy)]] //
macro Div(ux, uy) (dx(ux) + dy(uy)) //


fespace Xh(Th, P1);
Xh ux, uy, vx, vy, uxold, uyold, phi, eta;
Xh h; h[] = -FillZ(h[]);
Xh gradh2 = dx(h) * dx(h) + dy(h) * dy(h);
real alpha = 0.2;//Th.hmax * sqrt(gradh2[].sum);
// Xh Hinitial = 9 + zh;
Xh H = 9 + h;
Xh s = 0.5 * (sqrt(H^2 + alpha^2) - H);
Xh htilde = h + s;
Xh Htildeold = H + s;
Xh Htilde = Htildeold;


for(real t = dt; t <= T; t += dt){
    cout << "t: " << t << endl;
    cout << Htilde[].min << endl;
    real[int] BoundData = InterpolationData(t);
    real etaUB = BoundData(1);
    real etaUB1 = BoundData(2);
    real etaUB2 = BoundData(3);

    solve TransportEquation(Htilde, phi) = 
        int2d(Th)(Htilde * phi / dt) - int2d(Th)(Htildeold * phi / dt) 
        - int2d(Th)(Htilde * [ux, uy]' * Grad(phi))
        + on(2, Htilde = etaUB + htilde);// + on(1, Htilde = 0);// + on(3, H = etaUB1 - zh) + on(4, H = etaUB2 - zh);
    
    H = Htilde - alpha^2 / (4 * Htilde);
    real uUB = BoundData(0);
    eta = H - h; // check
    solve NavierStokes([ux, uy], [vx, vy], solver = sparsesolver) = 
        int2d(Th)((ux * vx + uy * vy) / dt)
        + int2d(Th)(
            - convect([uxold, uyold], -dt, uxold) * vx / dt 
            - convect([uxold, uyold], -dt, uyold) * vy / dt
        )
        + int2d(Th)(g * Grad(eta)' * [vx, vy])
        - int2d(Th)(nu / Htilde * [vx, vy]' * Grad2(ux, uy) * Grad(Htilde) - nu * Grad1(ux, uy)' * Grad1(vx, vy))
        + int2d(Th)((tau/Htilde^(4/3) * (uxold * uxold + uyold * uyold)^(0.5)) * (ux * vx + uy * vy))
        + on(2, ux = uUB, uy = 0) + on(1, ux = 0, uy = 0);
    
    Htildeold = Htilde;
    uxold = ux; uyold = uy;
}
