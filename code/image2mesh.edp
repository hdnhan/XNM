load "ppm2rnm" load "isoline" load "medit"
string image = "../realdata/image.pgm";
// 580 -> 604 (=24) and 2323 -> 2335 (=12)
real AreaImage = (24 + 2 * 0.2) * (12 + 2 * 0.2); // Km2 
real [int, int] Curves(3, 1);
int [int] be(1) ;
int nc;
{ 
	real [int, int] ff1(image) ; // read image and set to an rect. array
	int nx = ff1.n, ny = ff1.m;
	mesh Th = square(nx - 1, ny - 1, [(nx - 1) * x, (ny - 1) * (1 - y)]);
	fespace Vh(Th, P1);
	Vh f1;
	f1[] = ff1 ; // transforme array in finite element function.
	nc = isoline(Th, f1, Curves, iso = 0.25, close = 1, beginend = be, smoothing = .005, ratio = 0.1);
	verbosity = 1;
}
int ic0 = be(0), ic1 = be(1) - 1;
macro GG(i)
border G#i(t = 0, 1){
	P = Curve(Curves, be(2 * i), be(2 * i + 1) - 1, t);
	label = i + 1 + (abs(x - 7.56) < 0.5) + 2 * (abs(y - 7.59) < 0.5) + 3 * (abs(x - 960.4) < 0.5);
}
real lg#i = Curves(2, be(2 * i + 1) - 1); //
GG(0) GG(1) // number of closing curve
real hh = -20;
//plot(G0(lg0/hh) + G1(lg1/hh));

func bord = G0(lg0/hh);
mesh Th = buildmesh(bord);
//plot(Th, wait = 1);

func bord1 = G1(-lg1/hh);
mesh Th1 = buildmesh(bord1);
//plot(Th1, wait = 1);

real scale = sqrt(AreaImage / Th1.area);
cout << "Scale: " << scale << endl;
Th = movemesh(Th, [x * scale * 1000 + 580000 - 200, y * scale * 1000 + 2323000 - 200]);

// func newlabel = (label == 2) ? 1 : 0;
// Th = change(Th, flabel = newlabel);

//plot(Th, wait = true);
medit("Th", Th);
savemesh (Th ,"data/Th1.msh");