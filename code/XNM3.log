-- FreeFem++ v  3.610001 (date jeu. 12 juil. 2018 15:05:23)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : load "medit"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\medit = 0)
    2 :
    3 : string path = "data/";
    4 : int nthfile = 3;
    5 : string filemesh = "Th" + nthfile;
    6 : mesh Th = readmesh(path + filemesh + ".msh");
    7 :
    8 : int[int] NoVMesh = [515, 1802, 6718];
    9 : real[int, int] hz(NoVMesh[nthfile - 1], 3);
   10 : ifstream filemeshZ(path + filemesh + "CoZ.txt");
   11 : filemeshZ >> hz;
   12 :
   13 : real[string] mapz;
   14 : for (int i = 0; i < hz.n; i++){
   15 :     mapz[string(hz(i, 0)) + " " + string(hz(i, 1))] = hz(i, 2);
   16 : }
   17 :
   18 : func real[int] FillZ(real[int] mat){
   19 :     for (int i = 0; i < Th.nv; i++){
   20 :         mat(i) = mapz[string(Th(i).x) + " " + string(Th(i).y)];
   21 :     }
   22 :     return mat;
   23 : }
   24 :
   25 : real[int, int] data(503, 4);
   26 : ifstream filedata(path + "SLMIKE21-3.txt");
   27 : filedata >> data;
   28 :
   29 : func real[int] InterpolationData(real t){
   30 :     // t: time (unit: second)
   31 :     real T = 3600;
   32 :     int n = t /  T;
   33 :     real delt = t / T - n;
   34 :     real[int] res(4);
   35 :     res(0) = data(n + 1, 0) * delt + data(n, 0) * (1 - delt);
   36 :     res(1) = data(n + 1, 1) * delt + data(n, 1) * (1 - delt);
   37 :     res(2) = data(n + 1, 2) * delt + data(n, 2) * (1 - delt);
   38 :     res(3) = data(n + 1, 3) * delt + data(n, 3) * (1 - delt);
   39 :     return res;
   40 : }
   41 :
   42 : real dt = 1e-2, nu = 2.67 * 1e-4, g = 9.81, rho = 1000, n = 0.025, T = 9999999;
   43 : real tau =  g * n * n;
   44 : real eps = 0.05;
   45 :
   46 : macro Grad(u) [dx(u), dy(u)]  )   [dx(u), dy(u)] //
   47 : macro Grad1(ux, uy) [dx(ux), dy(ux), dx(uy), dy(uy)]  )   [dx(ux), dy(ux), dx(uy), dy(uy)] //
   48 : macro Grad2(ux, uy) [[dx(ux), dy(ux)], [dx(uy), dy(uy)]]  )   [[dx(ux), dy(ux)], [dx(uy), dy(uy)]] //
   49 : macro Div(ux, uy) (dx(ux) + dy(uy))  )   (dx(ux) + dy(uy)) //
   50 :
   51 :
   52 : fespace Xh(Th, P1);
   53 : fespace Hh(Th, P1dc);
   54 : Xh zh; zh[] = FillZ(zh[]);
   55 : Hh H, phi, Hold = 9 - zh;
   56 : Xh ux = 0.5, uy = 0.0;
   57 : Xh vdof;
   58 : vdof[] = 0 : Xh.ndof-1;
   59 :
   60 : int cnt = 0;
   61 : string foldername = "result3/";
   62 :
   63 : savemesh(Th, foldername + "ThH.mesh");
   64 : savemesh(Th, foldername + "ThU.mesh");
   65 :
   66 : for(real t = dt; t <= T; t += dt){
   67 :     cout << "t: " << t << endl;
   68 :     real[int] BoundData = InterpolationData(t);
   69 :     real etaUB = BoundData(1);
   70 :     // real etaUB1 = BoundData(2);
   71 :     // real etaUB2 = BoundData(3);
   72 :
   73 :     real al = 0.5;
   74 :     macro n() (N.x * ux + N.y * uy)  (N.x * ux + N.y * uy) //
   75 :     solve TransportEquation(H, phi) =
   76 :         int2d(Th)((H/dt + ux * dx(H) + uy * dy(H) + H * Div(ux, uy)     (dx(ux) + dy( uy)) ) * phi)
   77 :         + intalledges(Th)((1 - nTonEdge) * phi * (al * abs(n         (N.x * ux + N.y * uy) ) - n         (N.x *
È™ßt±Ë?ux + N.y * uy) /2) *  jump(H))
   78 :         - int1d(Th, 2)((n         (N.x * ux + N.y * uy)  < 0) * abs(n         (N.x * ux + N.y * uy) ) * H * phi)È™ßt±Ë? 
   79 :         - int2d(Th)(Hold * phi / dt)
   80 :         + int1d(Th, 2)((n         (N.x * ux + N.y * uy)  < 0) * abs(n         (N.x * ux + N.y * uy) ) * (etaUB -È™ßt±Ë? zh) * phi);
   81 :
   82 :     mesh Thwet = trunc(Th, H >= eps);
   83 :     // func  newlabel = (H >= eps && label == 0) ? 1 : label;
   84 :     // Thwet = change(Thwet, flabel = newlabel);
   85 :     // savemesh(Thwet, foldername + "Thwet.msh");
   86 :
   87 :     ofstream wf(foldername + "Thwet.msh");
   88 :     wf.fixed;
   89 :     wf << Thwet.nv << " " << Thwet.nt << " " << Thwet.nbe << endl;
   90 :
   91 :     for(int i = 0; i < Thwet.nv; i++){
   92 :         int check = 0;
   93 :         for (int j = 0; j < Thwet.nbe; j++){
   94 :             if ((i == Thwet.be(j)[0] || i == Thwet.be(j)[1]) && (Thwet(i).label == 0)){
   95 :                 check = 1;
   96 :                 break;
   97 :             }
   98 :         }
   99 :         if (check == 1){
  100 :             wf << Thwet(i).x << " " << Thwet(i).y << " " << 1 << endl;
  101 :         } else {
  102 :             wf << Thwet(i).x << " " << Thwet(i).y << " " << Thwet(i).label << endl;
  103 :         }
  104 :     }
  105 :
  106 :     for (int i = 0; i < Thwet.nt; i++){
  107 :         wf << Thwet[i][0] + 1 << " " << Thwet[i][1]  + 1 << " " << Thwet[i][2]  + 1 << " " << Thwet[i].label <<
È™ßt±Ë?endl;
  108 :     }
  109 :
  110 :     for(int i = 0; i < Thwet.nbe; i++){
  111 :         if (Thwet.be(i)[0].label == 0 || Thwet.be(i)[1].label == 0)
  112 :             wf << Thwet.be(i)[0] + 1 << " " << Thwet.be(i)[1] + 1 << " " << 1 <<  endl;
  113 :         else
  114 :             wf << Thwet.be(i)[0] + 1 << " " << Thwet.be(i)[1] + 1 << " " << Thwet.be(i).label <<  endl;
  115 :     }
  116 :
  117 :     wf.flush;
  118 :
  119 :     Thwet = readmesh(foldername + "Thwet.msh");
  120 :     // medit("Thwet", Thwet);
  121 :
  122 :     fespace Xhwet(Thwet, P1);
  123 :     Xhwet uwx, uwy, vx, vy;
  124 :     Xhwet uxold, uyold;
  125 :     Xhwet etawet, Hwet;
  126 :
  127 :     for(int i = 0; i < Thwet.nv; i++){
  128 :         uxold[][i] = ux(Thwet(i).x, Thwet(i).y);
  129 :         uyold[][i] = uy(Thwet(i).x, Thwet(i).y);
  130 :         Hwet[][i] = H(Thwet(i).x, Thwet(i).y);
  131 :         etawet[][i] = Hwet[][i] + zh(Thwet(i).x, Thwet(i).y);
  132 :     }
  133 :
  134 :     real uUB = BoundData(0);
  135 :     solve NavierStokes([uwx, uwy], [vx, vy], solver = Crout) =
  136 :         int2d(Thwet)((uwx * vx + uwy * vy) / dt)
  137 :         - int2d(Thwet)(
  138 :               convect([uxold, uyold], -dt, uxold) * vx / dt
  139 :             + convect([uxold, uyold], -dt, uyold) * vy / dt
  140 :         )
  141 :         + int2d(Thwet)(g * Grad(etawet)    [dx(etawet), dy(etawet)] ' * [vx, vy])
  142 :         // - int2d(Thwet)(g * eta * Div(vx, vy))
  143 :         - int2d(Thwet)(nu / Hwet * [vx, vy]' * Grad2(uwx, uwy)      [[dx(uwx), dy(uwx)], [dx( uwy), dy( uwy)]]
* Grad(Hwet)    [dx(Hwet), dy(Hwet)]  - nu * Grad1(uwx, uwy)      [dx(uwx), dy(uwx), dx( uwy), dy( uwy)] ' * Grad1(vx, vÈ™ßt±Ë?y)      [dx(vx), dy(vx), dx( vy), dy( vy)] )
  144 :         + int2d(Thwet)((tau * 1/Hwet^(4/3) * (uxold * uxold + uyold * uyold)^(0.5)) * (uwx * vx + uwy * vy))
  145 :         + on(2, uwx = uUB, uwy = 0) + on(1, uwx = 0, uwy = 0);
  146 :
  147 :     for (int i = 0; i < Thwet.nv; i++){
  148 :         if(Thwet(i).label == 1 && (abs(uwx[][i])>eps || abs(uwy[][i]) > eps)){
  149 :             cout << uwx[][i] << " EORROR " << uwy[][i] << endl;
  150 :         }
  151 :     }
  152 :     ux = 0; uy = 0; // reset
  153 :     for(int i = 0; i < Thwet.nv; i++){
  154 :         ux[][vdof(Thwet(i).x, Thwet(i).y)] = uwx[][i];
  155 :         uy[][vdof(Thwet(i).x, Thwet(i).y)] = uwy[][i];
  156 :     }
  157 :     Hold = H;
  158 :     // plot(H, fill = 1, value = 1);
  159 :     plot([uwx, uwy], fill = 1, value = 1);
  160 :     // medit("Th", Th, [ux, uy]);
  161 :
  162 :     savesol(foldername + "ThH." + string(cnt) + ".sol", Th, H);
  163 :         savemesh(Th, foldername + "ThH." + string(cnt)+".mesh");
  164 :     savesol(foldername + "ThU." + string(cnt) + ".sol", Th, [ux, uy]);
  165 :         savemesh(Th, foldername + "ThU." + string(cnt)+".mesh");
  166 :     cnt += 1;
  167 : }
  168 :  sizestack + 1024 =12776  ( 11752 )
 
  --  mesh:  Nb of Triangles =  12657, Nb of Vertices 6718
  number of required edges : 0
 write geo in result3/ThH.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.mesh.gmsh
t: 0.01
  -- Solve :
          min -8.17135  max 25.4135
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73071e-025  max 0.999937
          min -1.03441e-006  max 1.17519e-006
  number of required edges : 0
 write geo in result3/ThH.0.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.0.mesh.gmsh
t: 0.02
  -- Solve :
          min -8.17135  max 25.4127
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73066e-025  max 0.999871
          min -3.42534e-006  max 4.47675e-006
  number of required edges : 0
 write geo in result3/ThH.1.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.1.mesh.gmsh
t: 0.03
  -- Solve :
          min -8.17135  max 25.4119
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73058e-025  max 0.999806
          min -7.17166e-006  max 9.90435e-006
  number of required edges : 0
 write geo in result3/ThH.2.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.2.mesh.gmsh
t: 0.04
  -- Solve :
          min -8.17135  max 25.4117
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73049e-025  max 0.99974
          min -1.272e-005  max 1.74577e-005
  number of required edges : 0
 write geo in result3/ThH.3.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.3.mesh.gmsh
t: 0.05
  -- Solve :
          min -8.17135  max 25.413
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73041e-025  max 0.999675
          min -2.03183e-005  max 2.71363e-005
  number of required edges : 0
 write geo in result3/ThH.4.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.4.mesh.gmsh
t: 0.06
  -- Solve :
          min -8.17135  max 25.4142
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73033e-025  max 0.999609
          min -2.96833e-005  max 3.894e-005
  number of required edges : 0
 write geo in result3/ThH.5.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.5.mesh.gmsh
t: 0.07
  -- Solve :
          min -8.17135  max 25.4155
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73024e-025  max 0.999544
          min -4.08149e-005  max 5.28684e-005
  number of required edges : 0
 write geo in result3/ThH.6.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.6.mesh.gmsh
t: 0.08
  -- Solve :
          min -8.17135  max 25.4168
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73016e-025  max 0.999478
          min -5.37127e-005  max 6.89212e-005
  number of required edges : 0
 write geo in result3/ThH.7.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.7.mesh.gmsh
t: 0.09
  -- Solve :
          min -8.17135  max 25.4181
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.73007e-025  max 0.999413
          min -6.83765e-005  max 8.70979e-005
  number of required edges : 0
 write geo in result3/ThH.8.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.8.mesh.gmsh
t: 0.1
  -- Solve :
          min -8.17135  max 25.4194
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.72999e-025  max 0.999348
          min -8.4806e-005  max 0.000107398
  number of required edges : 0
 write geo in result3/ThH.9.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.9.mesh.gmsh
t: 0.11
  -- Solve :
          min -8.17135  max 25.4206
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.7299e-025  max 0.999283
          min -0.000103001  max 0.000129822
  number of required edges : 0
 write geo in result3/ThH.10.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.10.mesh.gmsh
t: 0.12
  -- Solve :
          min -8.17135  max 25.4219
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.72982e-025  max 0.999218
          min -0.000122961  max 0.000154369
  number of required edges : 0
 write geo in result3/ThH.11.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.11.mesh.gmsh
t: 0.13
  -- Solve :
          min -8.17135  max 25.4232
  --  mesh:  Nb of Triangles =   7956, Nb of Vertices 4684
 kk 2 3 :   -- Solve :
          min -3.72973e-025  max 0.999153
          min -0.000144686  max 0.000181038
  number of required edges : 0
 write geo in result3/ThH.12.mesh.gmsh
  number of required edges : 0
 write geo in result3/ThU.12.mesh.gmsh
t: 0.14
  -- Solve :
          min -8.17135  max 25.4245
 try getConsole D:\Study\Projects\XNM\code\XNM3.edp
